head(test, n=2000)
head(test, n=3000)
head(test, n=2500)
head(test, n=2400)
head(test, n=2300)
head(test, n=2350)
head(test, n=2360)
head(test, n=2370)
head(test, n=2380)
head(test, n=2390)
head(test, n=2395)
head(test, n=2394)
head(test, n=2393)
head(test, n=2392)
head(test, n=2390)
test[p=""]
test[p=""]
test[p=" "]
test[p==" "]
test[p==""]
test[p=='']
test[p=="on"]
test[p==""]
test[p=="   "]
test[p=="      "]
test[p=="     "]
test[p=="       "]
test[p==NULL]
test[p==' ']
test[p=='  ']
test[p=='   ']
test[p=='    ']
test[p=='     ']
test[p=='      ']
test[p=='       ']
test[p=='        ']
test[p=='         ']
test[p=='          ']
test[p=='          ']
test[p=='           ']
head(test, n=2390)
test[p=='     ']
test[p=='cinco']
head(test[p=='cinco'], n=3)
head(test[p=='cinco'], n=3)
head(test[p=='cinco'], n=3)[2]
head(test[p=='cinco'], n=3)[3]
class(head(test[p=='cinco'], n=3)[3])
class(head(test[p=='cinco'], n=3)[3], na.omit())
is.null(head(test[p=='cinco'], n=3)[3])
is.na(head(test[p=='cinco'], n=3)[3])
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-head(trigrams_dt[V1=="thanks for"], n=3)
l<-length(temp_dt[[1]])
for(j in c(1:l)){
p[(i*3)+j]<-temp_dt[j,]$V1
r[(i*3)+j]<-temp_dt[j,]$V2
f[(i*3)+j]<-temp_dt[j,]$V3
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
result_dt<-data.table(p,r,f)
result_dt
}
load(file="bigrams_dt.RData")
bigrams_f3_dt<-bigrams_dt[V3>2,]
unique_bigrams<-unique(unlist(bigrams_f3_dt[,V1]))
unique_bigrams_l<-length(unique_bigrams)
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-head(data[V1==unique_data[i+1]], n=3)
l<-length(temp_dt[[1]])
for(j in c(1:l)){
p[(i*3)+j]<-temp_dt[j,]$V1
r[(i*3)+j]<-temp_dt[j,]$V2
f[(i*3)+j]<-temp_dt[j,]$V3
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
result_dt<-data.table(p,r,f)
result_dt
}
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
final_bigrams_dt2[p=="on"]
final_bigrams_dt2[p=="cinco"]
test<-final_bigrams_dt2
head(test, n=2390)
head(test, n=2391)
head(test, n=2394)
head(test, n=2392)
test<-final_bigrams_dt2
head(test, n=2392)
test[p=='cinco']
head(test[p=='cinco'])
head(test[p=='cinco'], n=3)
dt<-head(test[p=='cinco'], n=3)
ength(dt[[1]])
length(dt[[1]])
dt<-head(test[p=='of'], n=3)
length(dt[[1]])
head(test, n=2392)
dt<-head(test[p=='of'], n=3)
test[p=='of']
test[f>1]
test[unlist(f)>1]
unlist(f)
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-head(data[V1==unique_data[i+1]], n=3)
l<-length(temp_dt[[1]])
for(j in c(1:l)){
p[(i*3)+j]<-temp_dt[j,]$V1
r[(i*3)+j]<-temp_dt[j,]$V2
f[(i*3)+j]<-temp_dt[j,]$V3
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
head(test, n=2392)
test<-final_bigrams_dt2
head(test, n=2392)
length(test[[1]])
test[,p,by=p]
test[,sum(p),by=p]
test[,p==NULL]
test[,p==NULL]
test[,p!=NULL]
test[,p=!NULL]
test[,p==NULL]
test[,p[]==NULL]
length(test[[1]])
length(dt[[1]])
print("sd")
if(length(dt[[1]])>3 ){
print("sd")
}
dt<-head(test[p=='of'], n=4)
if(length(dt[[1]])>3 ){
print("sd")
}
if(length(dt[[1]])>3 ){
print("sd")
}
dt
if(length(dt[[1]])>2 ){
print("sd")
}
if(length(dt[[1]])>2 ){
l<-2
}
l
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-data[V1==unique_data[i+1]]
l<-length(temp_dt[[1]])
if(l>3)
{
l<-3
}
for(j in c(1:l)){
p[(i*3)+j]<-temp_dt[j,]$V1
r[(i*3)+j]<-temp_dt[j,]$V2
f[(i*3)+j]<-temp_dt[j,]$V3
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
test<-final_bigrams_dt2
head(test, n=2392)
prop<-list(unlist(final_bigrams_dt2$f)/sum(unlist(final_bigrams_dt2$f)))
prop
unlist(final_bigrams_dt2$f)
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-data[V1==unique_data[i+1]]
l<-length(temp_dt[[1]])
if(l>3)
{
l<-3
}
for(j in c(1:l)){
#p[(i*3)+j]<-temp_dt[j,]$V1
append(p,temp_dt[j,]$V1)
#r[(i*3)+j]<-temp_dt[j,]$V2
append(r,temp_dt[j,]$V2)
#f[(i*3)+j]<-temp_dt[j,]$V3
append(f,temp_dt[j,]$V3)
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
test$p
a<-test$p
append(a,"S")
a
a<-append(a,"S")
a
a<-append(a,"S")
a
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-data[V1==unique_data[i+1]]
l<-length(temp_dt[[1]])
if(l>3)
{
l<-3
}
for(j in c(1:l)){
#p[(i*3)+j]<-temp_dt[j,]$V1
p<-append(p,temp_dt[j,]$V1)
#r[(i*3)+j]<-temp_dt[j,]$V2
r<-append(r,temp_dt[j,]$V2)
#f[(i*3)+j]<-temp_dt[j,]$V3
f<-append(f,temp_dt[j,]$V3)
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
system.time(final_bigrams_dt2<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
test<-final_bigrams_dt2
head(test, n=2392)
prop<-list(unlist(final_bigrams_dt2$f)/sum(unlist(final_bigrams_dt2$f)))
prop
test
test[, prop := prop]
test
system.time(final_bigrams_dt<-reduce_func(unique_bigrams_l, bigrams_f3_dt, unique_bigrams))
# Add property
prop<-list(unlist(final_bigrams_dt$f)/sum(unlist(final_bigrams_dt$f)))
final_bigrams_dt[, prop := prop]
final_bigrams_dt[p=="cinco"]
tail(final_bigrams_dt)
object.size(final_bigrams_dt)
save(final_bigrams_dt, file="final_bigrams_dt.RData")
load(file="trigrams_dt.RData")
trigrams_f3_dt<-trigrams_dt[V3>2,]
unique_trigrams<-unique(unlist(trigrams_f3_dt[,V1]))
unique_trigrams_l<-length(unique_trigrams)
system.time(final_trigrams_dt<-reduce_func(unique_trigrams_l, trigrams_f3_dt, unique_trigrams))
library(data.table)
load(file="trigrams_dt.RData")
# reduce mass
# Function
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-data[V1==unique_data[i+1]]
l<-length(temp_dt[[1]])
if(l>3)
{
l<-3
}
for(j in c(1:l)){
#p[(i*3)+j]<-temp_dt[j,]$V1
p<-append(p,temp_dt[j,]$V1)
#r[(i*3)+j]<-temp_dt[j,]$V2
r<-append(r,temp_dt[j,]$V2)
#f[(i*3)+j]<-temp_dt[j,]$V3
f<-append(f,temp_dt[j,]$V3)
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
trigrams_f3_dt<-trigrams_dt[V3>2,]
unique_trigrams<-unique(unlist(trigrams_f3_dt[,V1]))
unique_trigrams_l<-length(unique_trigrams)
system.time(final_trigrams_dt<-reduce_func(unique_trigrams_l, trigrams_f3_dt, unique_trigrams))
save(final_trigrams_dt, file="final_trigrams_dt.RData")
system.time(final_trigrams_dt[p=="on the"])
final_trigrams_dt[p=="on the"]
# Add property
prop<-list(unlist(final_trigrams_dt$f)/sum(unlist(final_trigrams_dt$f)))
final_trigrams_dt[, prop := prop]
final_trigrams_dt[p=="on the"]
tail(final_trigrams_dt)
save(final_trigrams_dt, file="final_trigrams_dt.RData")
object.size(final_trigrams_dt)
library(data.table)
load(file="fourgrams_dt.RData")
reduce_func<-function(x, data, unique_data){
p<-list() # predictor
r<-list() # result
f<-list() # frequncy
for(i in c(0:(x-1))){
#temp_dt<-head(data[V1==unique_data[i+1]], n=3)
temp_dt<-data[V1==unique_data[i+1]]
l<-length(temp_dt[[1]])
if(l>3)
{
l<-3
}
for(j in c(1:l)){
#p[(i*3)+j]<-temp_dt[j,]$V1
p<-append(p,temp_dt[j,]$V1)
#r[(i*3)+j]<-temp_dt[j,]$V2
r<-append(r,temp_dt[j,]$V2)
#f[(i*3)+j]<-temp_dt[j,]$V3
f<-append(f,temp_dt[j,]$V3)
}
#p[(i*3)+1]<-temp_dt[1,]$V1
#p[(i*3)+2]<-temp_dt[2,]$V1
#p[(i*3)+3]<-temp_dt[3,]$V1
#r[(i*3)+1]<-temp_dt[1,]$V2
#r[(i*3)+2]<-temp_dt[2,]$V2
#r[(i*3)+3]<-temp_dt[3,]$V2
#f[(i*3)+1]<-temp_dt[1,]$V3
#f[(i*3)+2]<-temp_dt[2,]$V3
#f[(i*3)+3]<-temp_dt[3,]$V3
print(c(i,"_"))
}
print(length(p))
print(length(r))
print(length(f))
result_dt<-data.table(p,r,f)
result_dt
}
#fourgrams
fourgrams_f3_dt<-fourgrams_dt[V3>2,]
unique_fourgrams<-unique(unlist(fourgrams_f3_dt[,V1]))
unique_fourgrams_l<-length(unique_fourgrams)
# Split lookup Vector
unique_fourgrams_01<-unique_fourgrams[1:200000]
unique_fourgrams_01_l<-length(unique_fourgrams_01)
unique_fourgrams_02<-unique_fourgrams[200001:unique_fourgrams_l]
unique_fourgrams_02_l<-length(unique_fourgrams_02)
system.time(final_fourgrams_dt_01<-reduce_func(unique_fourgrams_01_l, fourgrams_f3_dt, unique_fourgrams_01))
save(final_fourgrams_dt_01, file="final_fourgrams_dt_01.RData")
prop<-list(unlist(final_fourgrams_dt_01$f)/sum(unlist(final_fourgrams_dt_01$f)))
final_fourgrams_dt_01[, prop := prop]
final_fourgrams_dt_01[p=="on the"]
tail(final_fourgrams_dt_01)
save(final_fourgrams_dt_01, file="final_fourgrams_dt_01.RData")
system.time(final_fourgrams_dt_02<-reduce_func(unique_fourgrams_02_l, fourgrams_f3_dt, unique_fourgrams_02))
save(final_fourgrams_dt_02, file="final_fourgrams_dt_02.RData")
prop<-list(unlist(final_fourgrams_dt_02$f)/sum(unlist(final_fourgrams_dt_02$f)))
final_fourgrams_dt_02[, prop := prop]
final_fourgrams_dt_02[p=="on the"]
tail(final_fourgrams_dt_02)
final_fourgrams_dt_02[p=="one of the"]
save(final_fourgrams_dt_02, file="final_fourgrams_dt_02.RData")
save(final_fourgrams_dt_02, file="final_fourgrams_dt_02.RData")
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
?textInput
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
?try
?eval
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
load(file="unigrams_dt.RData")
head(unigrams_dt)
#unigrams
setnames(unigrams_dt,c("V1","V2"),c("r","f"))
head(unigrams_dt)
unigrams_dt[r==" "]
unigrams_dt[r==""]
unigrams_dt[r!=""]
final_unigrams_dt<-unigrams_dt[r!=""]
# Add property
prop<-list(unlist(final_unigrams_dt$f)/sum(unlist(final_unigrams_dt$f)))
prop
final_unigrams_dt[, prop := prop]
tail(final_unigrams_dt)
save(final_unigrams_dt, file="final_unigrams_dt.RData")
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
shiny::runApp('D:/Coursera/Course/C10_Capstone/Project/Code/NextWordPred')
